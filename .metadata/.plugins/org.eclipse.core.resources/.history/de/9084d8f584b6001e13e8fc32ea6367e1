package com.example.demo;

import java.util.Collections;
import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Controller
public class UserController {
	
	@GetMapping
	public String index() {
		
		return "index";
	}
	
	private final UserRepository userRepository;
	
	@GetMapping("/list")
	public String list(Model model) {
		
		List<User> userList;
		
		model.addAttribute("userKey", null);
        
        userList = this.userRepository.findAll();
		model.addAttribute("userList", userList);
			
		return "user_list";
	}
	
//	@GetMapping("/users")
//	@ResponseBody
//	public List<User> userList(Model model) {
//		List<User> userList = this.userRepository.findAll();
//		
//		model.addAttribute("userList", userList);
//
//		return userList;
//	}
//	
//	@GetMapping("/users/id/{id}")
//	@ResponseBody
//	public Optional<User> userById(
//						@PathVariable("id") Integer id) {
//		
//		Optional<User> user = this.userRepository.findById(id);
//		System.out.println(id);
//		
//		return user;
//	}
//	
//	@GetMapping("/users/name/{name}")
//	@ResponseBody
//	public Optional<User> userByName(
//						@PathVariable("name") String name) {
//		Optional<User> user = this.userRepository.findByName(name);
//		
//		return user;
//	}
//	
//	@GetMapping("/users/email/{email}")
//	@ResponseBody
//	public Optional<User> userByEmail(
//						@PathVariable("email") String email) {
//		Optional<User> user = this.userRepository.findByEmail(email);
//		
//		return user;
//	}
	
	@GetMapping("/users")
    @ResponseBody
    public List<User> userList(
            @RequestParam(required = false) Integer id,
            @RequestParam(required = false) String name,
            @RequestParam(required = false) String email,
            Model model) {
        
        List<User> userList;
        
        model.addAttribute("userKey", null);

        if (id != null) {
            userList = Collections.singletonList(userRepository.findById(id)
                    .orElseThrow(() -> new RuntimeException("User not found with id: " + id)));
        } else if (name != null) {
            userList = Collections.singletonList(userRepository.findByName(name)
                    .orElseThrow(() -> new RuntimeException("User not found with name: " + name)));
        } else if (email != null) {
            userList = Collections.singletonList(userRepository.findByEmail(email)
                    .orElseThrow(() -> new RuntimeException("User not found with email: " + email)));
        } else {
            userList = userRepository.findAll();
        }

        model.addAttribute("userList", userList);

        return userList;
    }
	
	@PostMapping("/users")
	@ResponseBody
	public User creadteUser(
						@RequestBody User newUser) {
		
		User createdUser = this.userRepository.save(newUser);
		
		return createdUser;
	}
	
	@PutMapping("/users/{id}")
	@ResponseBody
	public User updateUser(
						@PathVariable("id") Integer id,
						@RequestBody User modifiedUser) {
		Optional<User> optionalUser = this.userRepository.findById(id);
		
		User updatedUser;
		
		if (optionalUser.isPresent()) {
            User existingUser = optionalUser.get();
            existingUser.setEmail(modifiedUser.getEmail());
            existingUser.setName(modifiedUser.getName());
            
            updatedUser = userRepository.save(existingUser);
            
            return updatedUser;
		}
		else {
			throw new RuntimeException("User not found with id: " + id);
		}
	}
	
	@DeleteMapping("/users/{id}")
	@ResponseBody
	public User deleteUser(
						@PathVariable("id") Integer id) {
		
		Optional<User> userToDelete = userRepository.findById(id);
		
		User deletedUser = userToDelete.get();
		this.userRepository.deleteById(id);
		
		return deletedUser;
	}
	
	
}